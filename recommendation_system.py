# -*- coding: utf-8 -*-
"""recommendation_system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13YWTjS1vkzB_9larbPXxiB0N3TR_p6qq
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

###### helper functions. Use them when needed #######
def get_title_from_index(index):
	return df[df.index == index]["title"].values[0]

def get_index_from_title(title):
	return df[df.title == title]["index"].values[0]
  # return df[df['title']==title].index.values[0]

##################################################

##Step 1: Read CSV File
df=pd.read_csv("movie_dataset.csv")

##Step 2: Select Features
features=['keywords','cast','genres','director']

# This array define for fill the NA values using for loop

##Step 3: Fill not available values with space
for feature in features:
  df[feature]=df[feature].fillna('')

##Step 4: Create a new column in DF which combines all selected features
def combine_features(row):
  try:
    return row['keywords']+" "+row['cast']+" "+row['genres']+" "+row['director']
  except:
    print("error occured")
    print(row)
# here this combine features method will combine the selected features to an one string

df['new_column']=df.apply(combine_features,axis=1)
# here axis=1 means along the row
df['new_column']

##Step 4: Create count matrix from this new combined column
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

cv = CountVectorizer()
count_matrix = cv.fit_transform(df['new_column'])

# here this function vectorize the strings 
# After count matrix there will be a matrix like this

# 	        out	 of	  all	the	countries	world	some	are	poor	rich	but	 no	 country	

# #  M 	 0   9	  2	   1	 2	   3	     1	    2	   2	 1	   1	   1	  1	   1
# #  O   1
# #  V   2
# #  I   3
# #  E   4
# #  I   5
# #  N   6
# #  D   7
# #  E   8
# #  X   9

##Step 5: Compute the Cosine Similarity based on the count_matrix
cosine_matrix = cosine_similarity(count_matrix)
cosine_matrix

# here this function calculate the distance of the count matrix data points using cos angular value.In this case this method is more suitable than euclidean distance
# After cosine_similarity there will be a matrix like this
#           0    1     2     3     4     5     6     7     8 9 10
#  M   0    1   0.45  0.42  0.78  0.72  0.98  0.12  0.89
#  O   1
#  V   2
#  I   3
#  E   4
#  I   5
#  N   6
#  D   7
#  E   8
#  X   9


movie_user_likes = "Transformers: Age of Extinction"

## Step 6: Get index of this movie from its title

movie_index = get_index_from_title(movie_user_likes)
movie_index
# here this finds the index of the selected movie from the dataset

# ## Step 7: Get a list of similar movies in descending order of similarity score

similar_movies =  list(enumerate(cosine_matrix[movie_index]))

# Here this method provides the list of similarity score values of the selected movie.Then these scores put into a tupple using enumerate method.
# Then these tuples put into a list usig list function
# list of tuples is organized in this way [(0,1),(1,0.56),(2,0.34),(3,0.78).....]

#           0    1     2     3     4     5     6     7     8 9 10
#  M   0    1   0.45  0.42  0.78  0.72  0.98  0.12  0.89
#  O   1
#  V   2
#  I   3
#  E   4
#  I   5
#  N   6
#  D   7
#  E   8
#  X   9
# for each and every movie there is a list of similarity scores.As you can see the 0th indexed movie has 1,0.45,0.42,0.78,..... similarity scores for each movie


sorted_similar_movies = sorted(similar_movies,key=lambda x:x[1],reverse=True)

# Here the selected list of tuples are sorted in descending order.
# Here reverse=true means Descending order
# lambda x:x[1] means the 1st index of the tuple. 
# list of tuples is organized in this way [(0,1),(1,0.45),(2,0.42),(3,0.78).....] 1st index of a tuple means 2nd value of tuple.Here in first tuple it is 1.in second tuple it is 0.45
# That means the sorted function will sort the list by considering similarity scores

# ## Step 8: Print titles of first 50 movies

i=0
for element in sorted_similar_movies:
		print(get_title_from_index(element[0]))
		i=i+1
		if i>50:
			break